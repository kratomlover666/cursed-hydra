// Включаем аудио-анализатор
a.show()
a.setSmooth(0.9) // Смягчение данных спектра

// Генерация шума с динамическим масштабированием
noise(5, () => a.fft[3] * 100000) // Высокие частоты влияют на детализацию шума
  .modulateScale(o1, () => a.fft[1] * 9) // Средние частоты изменяют масштаб
  .color(1, 2)
  .modulate(o0, () => a.fft[2] * 0.5) // Басовые частоты добавляют искажения
  .layer(
    osc(10, 1)
      .mask(noise(2, () => a.fft[3] * 0.2)) // Управляем маской шумом
  )
  .out(o0)

// Осциллятор для модуляции
osc(100, 1)
  .modulate(noise(() => a.fft[3] * 5, 0.1)) // Добавляем колебания, реагирующие на звук
  .out(o1)

———————————————————————————————————————————————————————————————————————————————————————————————————

// Включаем аудио-анализатор
a.show()
a.setSmooth(0.98) // Сильнее сглаживаем резкие изменения в звуке

// Генерация шума с медленной динамикой
noise(10, () => a.fft[2] * 20000) // В 5 раз меньше амплитуды
  .modulateScale(o1, () => a.fft[1] * 3) // Уменьшили влияние средних частот
  .color(1, 2)
  .modulate(o0, () => a.fft[2] * 0.1) // Басовые частоты с меньшим влиянием
  .layer(
    osc(5, 0.1) // Осциллятор с очень низкой частотой
      .mask(noise(1, () => a.fft[3] * 0.5)) // Медленное изменение маски
  )
  .out(o0)

// Медленный осциллятор
osc(30, 0.2) // Было 100, 1 -> стало 30, 0.2 (замедлили)
  .modulate(noise(() => a.fft[3] * 1, 0.02)) // Слабее реагирует на звук
  .out(o1)

———————————————————————————————————————————————————————————————————————————————————————————————————

noise(5, 0.4)
  .modulateScale(o1)
  .color(1, 2, 3)
  .modulate(o0, 0.1)
  .layer(osc(10, 1).mask(noise(3, 0.1))) // Добавляем осциллятор поверх шума
  .out(o0)

osc(100, 1)
  .out(o1)

